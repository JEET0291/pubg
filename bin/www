#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('hellow:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const socketIO = require('socket.io');
const io = socketIO(server);
let gameStartIn = 25;
let gameDuration = 25;
var roomno = 0;
let team = {};
io.on('connection', function(socket) {
    let player = null;
    console.log("########### CONNECTED ############");
    socket.on('game-start', (config) => {
      console.log("########### GAME STARTED ############");      
      player = {
          socketId: socket.id,
          nickname: config.nickname,
          fire: 0
      };
      team[player.socketId] = player;
      // console.log("########### PLAYERS ############", team);
      if(roomno==1){
        console.log("######### JOIN ROOM ##########");
        socket.join("room-"+roomno);
      }else {
        console.log("######### CREATE NEW ROOM ##########");
        roomno++;
        io.nsps['/'].adapter.rooms["room-"+roomno];
        socket.join("room-"+roomno);
        tick(roomno,gameStartIn,"lobbyTime");
        setInterval(function(){ 
          roomno=0;
        }, gameStartIn * 1000);
      }
      
      // EMIT PLAYER INFO IN ROOM //
      io.sockets.in("room-"+roomno).emit('connectToRoom', team);
    });

    // Emit Timer Data in All the Rooms Every second // 
      
      function tick(roomno,secondLeft,type) {
          console.log('tick',roomno,secondLeft);
          secondLeft -= 1;
          if(secondLeft === 0){
            if(type == "lobbyTime"){
              io.sockets.in("room-"+roomno).emit('playzoneStart', {test:"fire"});
              tick(roomno,gameDuration,"gameTime");
            }else if(type == "gameTime"){
              io.sockets.in("room-"+roomno).emit("scoreBoard",team);
            }
          } else {
            if(type == "lobbyTime"){
              io.sockets.in("room-"+roomno).emit("timer",{ "secondLeft" : secondLeft});
            }else if(type == "gameTime"){
              io.sockets.in("room-"+roomno).emit("gameTime",{ "secondLeft" : secondLeft});
            }
            setTimeout(tick, 1000,roomno,secondLeft,type);
          }
      };
      
    socket.on('shoot', function(player){
        team[player.socketId].fire += 1;
        console.log("########### SHOOT ############",team); 

    });

    socket.on('disconnect', () => {
        console.log("########### DISCONNECTED ############"); 
        if(!player){return;}
        delete team[player.id];
        player = null;
    });
});



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


module.exports = server;